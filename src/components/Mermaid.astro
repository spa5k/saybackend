---
interface Props {
  code: string;
}

const { code } = Astro.props;
---

<div class="mermaid-container">
  <div class="mermaid" id="mermaid-diagram">
    {code}
  </div>
  <button class="zoom-button" aria-label="Zoom diagram">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <circle cx="11" cy="11" r="8"></circle>
      <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
    </svg>
  </button>
</div>

<div class="modal" id="mermaid-modal">
  <div class="modal-content">
    <button class="close-button" aria-label="Close modal">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <div class="mermaid-modal" id="mermaid-diagram-modal">
      {code}
    </div>
  </div>
</div>

<style>
  .mermaid-container {
    position: relative;
    cursor: pointer;
    margin: 1rem 0;
  }

  .zoom-button {
    position: absolute;
    top: 8px;
    right: 8px;
    padding: 4px;
    border-radius: 4px;
    background: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(0, 0, 0, 0.1);
    cursor: pointer;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
    z-index: 1;
  }

  .mermaid-container:hover .zoom-button {
    opacity: 1;
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(4px);
  }

  .modal.active {
    display: flex;
  }

  .modal-content {
    position: relative;
    background: white;
    padding: 2rem;
    border-radius: 8px;
    max-width: 90vw;
    max-height: 90vh;
    overflow: auto;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    padding: 0.5rem;
    border-radius: 4px;
    background: transparent;
    border: none;
    cursor: pointer;
    color: #666;
    transition: color 0.2s ease-in-out;
  }

  .close-button:hover {
    color: #000;
  }

  .mermaid-modal {
    transform-origin: center;
    transition: transform 0.2s ease-in-out;
    padding: 1rem;
  }

  .mermaid-modal.zoomed {
    transform: scale(1.5);
  }

  :global(.dark) .modal-content {
    background: #1a1a1a;
  }

  :global(.dark) .zoom-button {
    background: rgba(0, 0, 0, 0.8);
    border-color: rgba(255, 255, 255, 0.1);
  }

  :global(.dark) .close-button {
    color: #999;
  }

  :global(.dark) .close-button:hover {
    color: #fff;
  }

  /* Prevent body scroll when modal is open */
  :global(body.modal-open) {
    overflow: hidden;
    padding-right: 15px; /* Prevent layout shift when scrollbar disappears */
  }
</style>

<script>
  import mermaid from "mermaid";

  // Initialize mermaid with default config
  mermaid.initialize({
    startOnLoad: true,
    theme: "default",
    securityLevel: "loose",
    themeVariables: {
      darkMode: document.documentElement.classList.contains("dark"),
    },
  });

  // Re-run mermaid when the page content changes
  document.addEventListener("astro:after-swap", () => {
    mermaid.contentLoaded();
  });

  // Modal functionality
  const modal = document.getElementById("mermaid-modal");
  const modalContent = document.querySelector(".modal-content");
  const closeButton = document.querySelector(".close-button");
  const zoomButton = document.querySelector(".zoom-button");
  const mermaidDiagram = document.getElementById("mermaid-diagram");
  const mermaidDiagramModal = document.getElementById("mermaid-diagram-modal");
  let isZoomed = false;
  let scrollPosition = 0;

  // Open modal
  function openModal() {
    scrollPosition = window.scrollY;
    document.body.classList.add("modal-open");
    modal?.classList.add("active");
  }

  // Close modal
  function closeModal() {
    modal?.classList.remove("active");
    document.body.classList.remove("modal-open");
    window.scrollTo(0, scrollPosition);
    isZoomed = false;
    mermaidDiagramModal?.classList.remove("zoomed");
  }

  // Toggle zoom
  function toggleZoom() {
    isZoomed = !isZoomed;
    mermaidDiagramModal?.classList.toggle("zoomed");
  }

  // Event listeners
  mermaidDiagram?.addEventListener("click", openModal);
  closeButton?.addEventListener("click", closeModal);
  zoomButton?.addEventListener("click", (e) => {
    e.stopPropagation();
    toggleZoom();
  });

  // Close modal on escape key
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      closeModal();
    }
  });

  // Close modal when clicking outside
  modal?.addEventListener("click", (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });
</script>
