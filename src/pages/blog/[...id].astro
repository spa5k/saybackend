---
import { type CollectionEntry, getCollection, render } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import PostNavigation from "@components/PostNavigation.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Giscus from "@components/Giscus.astro";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const posts = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

function getNextPost() {
  let postIndex;
  for (const post of posts) {
    if (post.id === Astro.params.id) {
      postIndex = posts.indexOf(post);
      return posts[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex;
  for (const post of posts) {
    if (post.id === Astro.params.id) {
      postIndex = posts.indexOf(post);
      return posts[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();

const post = Astro.props;
const { Content, headings } = await render(post);
---

<Layout title={post.data.title} description={post.data.description}>
  <Container>
    <div class="animate">
      <BackToPrevious href="/blog">Back to blog</BackToPrevious>
    </div>
    <div class="my-10 space-y-1">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={post.data.date} />
        </div>
        &bull;
        {
          post.body && (
            <div class="font-base text-sm">{readingTime(post.body)}</div>
          )
        }
      </div>
      <h1 class="animate text-3xl font-semibold text-black dark:text-white">
        {post.data.title}
      </h1>
      {
        post.data.tags && post.data.tags?.length > 0 ? (
          <div class="animate flex gap-2 pt-1">
            <ul class="flex flex-wrap gap-2">
              {post.data.tags.map((tag, index) => (
                <li
                  class={`rounded-md bg-gray-800 px-2 py-1 text-sm font-medium text-white ${index >= 5 ? "hidden" : ""}`}
                  title={`${tag}`}
                >
                  <a href={`/tags/${tag}`}>{tag}</a>
                </li>
              ))}
            </ul>
          </div>
        ) : null
      }
    </div>
    {headings.length > 0 && <TableOfContents headings={headings} />}
    <article class="animate">
      <Content />
      <div class="mt-24">
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
      </div>
      <div class="mt-24">
        <Giscus />
      </div>
    </article>
  </Container>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const postData = document.getElementById("post-data");
    if (!postData) return;

    const title = postData.dataset.title;
    const ogImage = postData.dataset.ogimage;
    const datePublished = postData.dataset.date;
    const description = postData.dataset.description;

    const script = document.createElement("script");
    script.type = "application/ld+json";
    script.textContent = JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      headline: title,
      image: ogImage,
      author: {
        "@type": "Person",
        name: "spark",
      },
      publisher: {
        "@type": "Organization",
        name: "SayBackend",
        logo: {
          "@type": "ImageObject",
          url: "/images/saybackend.png",
        },
      },
      datePublished: datePublished,
      dateModified: datePublished,
      description: description,
    });

    document.head.appendChild(script);
  });
</script>
