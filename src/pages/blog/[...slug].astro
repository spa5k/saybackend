---
import BackToPrevious from "@components/BackToPrevious.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import Giscus from "@components/Giscus.astro";
import PostNavigation from "@components/PostNavigation.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Layout from "@layouts/Layout.astro";
import { readingTime } from "@lib/utils";
import { type CollectionEntry, getCollection } from "astro:content";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const posts = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

function getNextPost() {
  let postIndex;
  for (const post of posts) {
    if (post.slug === Astro.params.slug) {
      postIndex = posts.indexOf(post);
      return posts[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex;
  for (const post of posts) {
    if (post.slug === Astro.params.slug) {
      postIndex = posts.indexOf(post);
      return posts[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();

const post = Astro.props;
const { Content, headings } = await post.render();
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.ogImage}
>
  <Container>
    <div class="animate">
      <BackToPrevious href="/blog">Back to blog</BackToPrevious>
    </div>
    <div class="my-10 space-y-1">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={post.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(post.body)}
        </div>
      </div>
      <h1 class="animate text-3xl font-semibold text-black dark:text-white">
        {post.data.title}
      </h1>
    </div>
    {headings.length > 0 && <TableOfContents headings={headings} />}
    <article class="animate">
      <Content />
      <div class="mt-24">
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
      </div>
      <div class="mt-24">
        <Giscus />
      </div>
    </article>
    <section class="mt-10" aria-label="Post Tags">
      <div class="flex flex-wrap gap-2">
        <ul class="flex flex-wrap gap-2">
          {
            post.data.tags &&
              post.data.tags.map((tag, index) => (
                <li
                  class={`rounded-md bg-gray-800 px-2 py-1 text-sm font-medium text-white ${index >= 5 ? "hidden" : ""}`}
                  title={`${tag}`}
                >
                  {tag}
                </li>
              ))
          }
        </ul>
      </div>
    </section>
    <div
      id="post-data"
      data-title={post.data.title}
      data-ogimage={post.data.ogImage}
      data-date={post.data.date.toISOString()}
      data-description={post.data.description}
    >
    </div>
  </Container>
</Layout>

<script>
  import { annotate, annotationGroup } from "rough-notation";
  const notions = document.querySelectorAll("span[data-notion-identity]");
  const annotations = new Array(notions.length).fill(0).map((_, index) => {
    const node = notions[index] as HTMLSpanElement;
    const type = node.dataset.notionType;
    const color = node.dataset.notionColor;
    const strokeWidth = node.dataset.notionStrokewidth;
    return annotate(node, {
      type: (type as "underline") ?? "underline",
      color: color ?? "red",
      animate: false,
      multiline: type === "bracket" ? false : true,
      brackets: ["left", "right"],
      strokeWidth: Number(strokeWidth) ?? 1.5,
    });
  });
  annotationGroup(annotations).show();
</script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const postData = document.getElementById("post-data");
    if (!postData) return;

    const title = postData.dataset.title;
    const ogImage = postData.dataset.ogimage;
    const datePublished = postData.dataset.date;
    const description = postData.dataset.description;

    const script = document.createElement("script");
    script.type = "application/ld+json";
    script.textContent = JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      headline: title,
      image: ogImage,
      author: {
        "@type": "Person",
        name: "spark",
      },
      publisher: {
        "@type": "Organization",
        name: "SayBackend",
        logo: {
          "@type": "ImageObject",
          url: "/images/saybackend.png",
        },
      },
      datePublished: datePublished,
      dateModified: datePublished,
      description: description,
    });

    document.head.appendChild(script);
  });
</script>
